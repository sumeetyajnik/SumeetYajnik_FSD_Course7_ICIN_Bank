pipeline {
    agent any

    triggers {
        pollSCM '* * * * *'
    }
    tools {
        nodejs "NODEJS"
        maven "MAVEN"
        jdk "JDK"
    }
    stages {
        stage('Initialize'){
            steps{
                echo "PATH = ${M2_HOME}/bin:${PATH}"
                echo "M2_HOME = /opt/maven"
            }
        }
        stage('Build - icin-backend-api') {
            steps {
            dir('icin-backend-api/icin_bank_final') {
                 sh 'mvn -B -DskipTests clean package'
            }
        }
        }
        stage('Build Docker image - icin-backend-api') {
            steps {
            dir('icin-backend-api/icin_bank_final') {
                sh './gradlew docker'
                }
            }
        }
        stage('Push Docker image - icin-backend-api') {
            environment {
                DOCKER_HUB_LOGIN = credentials('docker-hub')
            }
            steps {
            dir('icin-backend-api/icin_bank_final') {
                sh 'docker login --username=$DOCKER_HUB_LOGIN_USR --password=$DOCKER_HUB_LOGIN_PSW'
                sh './gradlew dockerPush -PdockerHubUsername=$DOCKER_HUB_LOGIN_USR'
                }
            }
        }
        stage('Deploy to AWS - icin-backend-api') {
            environment {
                DOCKER_HUB_LOGIN = credentials('docker-hub')
            }
            steps {
                withAWS(credentials: 'aws-credentials', region: env.AWS_REGION) {
                 dir('icin-backend-api/icin_bank_final') {
                    sh './gradlew awsCfnMigrateStack awsCfnWaitStackComplete -PsubnetId=$SUBNET_ID -PdockerHubUsername=$DOCKER_HUB_LOGIN_USR -Pregion=$AWS_REGION'
                    }
                }
            }
        }
        stage('Build - icin-user-ui') {
          steps {
            dir('icin-user-ui') {
            sh 'npm install'
            sh 'npm ng build'
            }
          }
        }
        stage('Test - icin-bank') {
            steps {
             dir('/icin-testing/ICIN_test') {
                   sh 'mvn test'
                }
            }
        }
        stage('Build Docker image - icin-user-ui') {
            steps {
              dir('icin-user-ui') {
                sh './gradlew docker'
                }
            }
        }
        stage('Push Docker image - icin-user-ui') {
            environment {
                DOCKER_HUB_LOGIN = credentials('docker-hub')
            }
            steps {
              dir('icin-user-ui') {
                sh 'docker login --username=$DOCKER_HUB_LOGIN_USR --password=$DOCKER_HUB_LOGIN_PSW'
                sh './gradlew dockerPush -PdockerHubUsername=$DOCKER_HUB_LOGIN_USR'
                }
            }
        }
        stage('Deploy to AWS - icin-user-ui') {
            environment {
                DOCKER_HUB_LOGIN = credentials('docker-hub')
            }
            steps {
                withAWS(credentials: 'aws-credentials', region: env.AWS_REGION) {
                dir('icin-user-ui') {
                    sh './gradlew awsCfnMigrateStack awsCfnWaitStackComplete -PsubnetId=$SUBNET_ID -PdockerHubUsername=$DOCKER_HUB_LOGIN_USR -Pregion=$AWS_REGION'
                    }
                }
            }
        }
    stage('Build - icin-admin-ui') {
          steps {
            dir('icin-admin-ui/AdminPortal') {
            sh 'npm install'
            sh 'npm ng build'
            }
          }
        }
        stage('Build Docker image - icin-admin-ui') {
            steps {
              dir('icin-admin-ui/AdminPortal') {
                sh './gradlew docker'
                }
            }
        }
        stage('Push Docker image - icin-admin-ui') {
            environment {
                DOCKER_HUB_LOGIN = credentials('docker-hub')
            }
            steps {
              dir('icin-admin-ui/AdminPortal') {
                sh 'docker login --username=$DOCKER_HUB_LOGIN_USR --password=$DOCKER_HUB_LOGIN_PSW'
                sh './gradlew dockerPush -PdockerHubUsername=$DOCKER_HUB_LOGIN_USR'
                }
            }
        }
        stage('Deploy to AWS - icin-admin-ui') {
            environment {
                DOCKER_HUB_LOGIN = credentials('docker-hub')
            }
            steps {
                withAWS(credentials: 'aws-credentials', region: env.AWS_REGION) {
                dir('icin-admin-ui/AdminPortal') {
                    sh './gradlew awsCfnMigrateStack awsCfnWaitStackComplete -PsubnetId=$SUBNET_ID -PdockerHubUsername=$DOCKER_HUB_LOGIN_USR -Pregion=$AWS_REGION'
                    }
                }
            }
        }
    }
}